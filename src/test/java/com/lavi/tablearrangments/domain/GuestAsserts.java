package com.lavi.tablearrangments.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GuestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestAllPropertiesEquals(Guest expected, Guest actual) {
        assertGuestAutoGeneratedPropertiesEquals(expected, actual);
        assertGuestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestAllUpdatablePropertiesEquals(Guest expected, Guest actual) {
        assertGuestUpdatableFieldsEquals(expected, actual);
        assertGuestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestAutoGeneratedPropertiesEquals(Guest expected, Guest actual) {
        assertThat(actual)
            .as("Verify Guest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestUpdatableFieldsEquals(Guest expected, Guest actual) {
        assertThat(actual)
            .as("Verify Guest relevant properties")
            .satisfies(a ->
                assertThat(a.getLastNameAndFirstName()).as("check lastNameAndFirstName").isEqualTo(expected.getLastNameAndFirstName())
            )
            .satisfies(a -> assertThat(a.getNumberOfSeats()).as("check numberOfSeats").isEqualTo(expected.getNumberOfSeats()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getNearStage()).as("check nearStage").isEqualTo(expected.getNearStage()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getSide()).as("check side").isEqualTo(expected.getSide()))
            .satisfies(a -> assertThat(a.getRelation()).as("check relation").isEqualTo(expected.getRelation()))
            .satisfies(a -> assertThat(a.getAccessibility()).as("check accessibility").isEqualTo(expected.getAccessibility()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestUpdatableRelationshipsEquals(Guest expected, Guest actual) {
        assertThat(actual)
            .as("Verify Guest relationships")
            .satisfies(a -> assertThat(a.getEvent()).as("check event").isEqualTo(expected.getEvent()))
            .satisfies(a -> assertThat(a.getTable()).as("check table").isEqualTo(expected.getTable()))
            .satisfies(a -> assertThat(a.getAvoidGuests()).as("check avoidGuests").isEqualTo(expected.getAvoidGuests()))
            .satisfies(a -> assertThat(a.getPreferGuests()).as("check preferGuests").isEqualTo(expected.getPreferGuests()))
            .satisfies(a -> assertThat(a.getAvoidedBies()).as("check avoidedBies").isEqualTo(expected.getAvoidedBies()))
            .satisfies(a -> assertThat(a.getPreferredBies()).as("check preferredBies").isEqualTo(expected.getPreferredBies()));
    }
}
