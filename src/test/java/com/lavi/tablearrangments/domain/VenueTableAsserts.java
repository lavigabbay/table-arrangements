package com.lavi.tablearrangments.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VenueTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueTableAllPropertiesEquals(VenueTable expected, VenueTable actual) {
        assertVenueTableAutoGeneratedPropertiesEquals(expected, actual);
        assertVenueTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueTableAllUpdatablePropertiesEquals(VenueTable expected, VenueTable actual) {
        assertVenueTableUpdatableFieldsEquals(expected, actual);
        assertVenueTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueTableAutoGeneratedPropertiesEquals(VenueTable expected, VenueTable actual) {
        assertThat(actual)
            .as("Verify VenueTable auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueTableUpdatableFieldsEquals(VenueTable expected, VenueTable actual) {
        assertThat(actual)
            .as("Verify VenueTable relevant properties")
            .satisfies(a -> assertThat(a.getNumberOfTables()).as("check numberOfTables").isEqualTo(expected.getNumberOfTables()))
            .satisfies(a -> assertThat(a.getNearStageTables()).as("check nearStageTables").isEqualTo(expected.getNearStageTables()))
            .satisfies(a -> assertThat(a.getVenueName()).as("check venueName").isEqualTo(expected.getVenueName()))
            .satisfies(a -> assertThat(a.getEventOwners()).as("check eventOwners").isEqualTo(expected.getEventOwners()))
            .satisfies(a -> assertThat(a.getGroomParents()).as("check groomParents").isEqualTo(expected.getGroomParents()))
            .satisfies(a -> assertThat(a.getBrideParents()).as("check brideParents").isEqualTo(expected.getBrideParents()))
            .satisfies(a -> assertThat(a.getWeddingDate()).as("check weddingDate").isEqualTo(expected.getWeddingDate()))
            .satisfies(a -> assertThat(a.getReceptionTime()).as("check receptionTime").isEqualTo(expected.getReceptionTime()))
            .satisfies(a -> assertThat(a.getWeddingTime()).as("check weddingTime").isEqualTo(expected.getWeddingTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVenueTableUpdatableRelationshipsEquals(VenueTable expected, VenueTable actual) {
        // empty method
    }
}
