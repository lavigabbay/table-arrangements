package com.lavi.tablearrangments.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GuestTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestTableAllPropertiesEquals(GuestTable expected, GuestTable actual) {
        assertGuestTableAutoGeneratedPropertiesEquals(expected, actual);
        assertGuestTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestTableAllUpdatablePropertiesEquals(GuestTable expected, GuestTable actual) {
        assertGuestTableUpdatableFieldsEquals(expected, actual);
        assertGuestTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestTableAutoGeneratedPropertiesEquals(GuestTable expected, GuestTable actual) {
        assertThat(actual)
            .as("Verify GuestTable auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestTableUpdatableFieldsEquals(GuestTable expected, GuestTable actual) {
        assertThat(actual)
            .as("Verify GuestTable relevant properties")
            .satisfies(a ->
                assertThat(a.getLastNameAndFirstName()).as("check lastNameAndFirstName").isEqualTo(expected.getLastNameAndFirstName())
            )
            .satisfies(a -> assertThat(a.getNumberOfSeats()).as("check numberOfSeats").isEqualTo(expected.getNumberOfSeats()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getNearDanceFloor()).as("check nearDanceFloor").isEqualTo(expected.getNearDanceFloor()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getSide()).as("check side").isEqualTo(expected.getSide()))
            .satisfies(a -> assertThat(a.getRelation()).as("check relation").isEqualTo(expected.getRelation()))
            .satisfies(a -> assertThat(a.getNotWithId()).as("check notWithId").isEqualTo(expected.getNotWithId()))
            .satisfies(a -> assertThat(a.getWithId()).as("check withId").isEqualTo(expected.getWithId()))
            .satisfies(a -> assertThat(a.getConditions()).as("check conditions").isEqualTo(expected.getConditions()))
            .satisfies(a -> assertThat(a.getAccessibility()).as("check accessibility").isEqualTo(expected.getAccessibility()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGuestTableUpdatableRelationshipsEquals(GuestTable expected, GuestTable actual) {
        assertThat(actual)
            .as("Verify GuestTable relationships")
            .satisfies(a -> assertThat(a.getVenueName()).as("check venueName").isEqualTo(expected.getVenueName()))
            .satisfies(a -> assertThat(a.getEventTable()).as("check eventTable").isEqualTo(expected.getEventTable()));
    }
}
