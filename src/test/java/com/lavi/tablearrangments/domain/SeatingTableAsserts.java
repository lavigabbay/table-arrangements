package com.lavi.tablearrangments.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SeatingTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatingTableAllPropertiesEquals(SeatingTable expected, SeatingTable actual) {
        assertSeatingTableAutoGeneratedPropertiesEquals(expected, actual);
        assertSeatingTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatingTableAllUpdatablePropertiesEquals(SeatingTable expected, SeatingTable actual) {
        assertSeatingTableUpdatableFieldsEquals(expected, actual);
        assertSeatingTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatingTableAutoGeneratedPropertiesEquals(SeatingTable expected, SeatingTable actual) {
        assertThat(actual)
            .as("Verify SeatingTable auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatingTableUpdatableFieldsEquals(SeatingTable expected, SeatingTable actual) {
        assertThat(actual)
            .as("Verify SeatingTable relevant properties")
            .satisfies(a -> assertThat(a.getTableNumber()).as("check tableNumber").isEqualTo(expected.getTableNumber()))
            .satisfies(a -> assertThat(a.getMaxSeats()).as("check maxSeats").isEqualTo(expected.getMaxSeats()))
            .satisfies(a -> assertThat(a.getNearStage()).as("check nearStage").isEqualTo(expected.getNearStage()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSeatingTableUpdatableRelationshipsEquals(SeatingTable expected, SeatingTable actual) {
        assertThat(actual)
            .as("Verify SeatingTable relationships")
            .satisfies(a -> assertThat(a.getEvent()).as("check event").isEqualTo(expected.getEvent()));
    }
}
